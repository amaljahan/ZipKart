<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Coupon Management</title>
  <link rel="stylesheet" href="/css/admin/dashboard.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
  .swal2-container {
    z-index: 99999 !important;
}
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  /* Base Layout */
  body {
    display: flex;
    font-family: Arial, sans-serif;
    min-height: 100vh;
    overflow-x: hidden;
  }

/* Sidebar Styles */
.sidebar {
    background-color: #1f2937;
    color: #fff;
    padding: 1rem;
    width: 240px;
    min-height: 100vh;
    transition: all 0.3s ease;
    position: fixed;
    left: 0;
    top: 0;
    z-index: 1000;
  }

.sidebar .logo {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 20px;
}
.logo {
    font-size: clamp(1.2rem, 2vw, 1.5rem);
    margin-bottom: 2rem;
    white-space: nowrap;
  }

.sidebar .menu-item {
  margin-bottom: 10px;
}

.sidebar .menu-item a {
  color: #fff;
  text-decoration: none;
  display: flex;
  align-items: center;
}
.menu-item a {
    color: #fff;
    text-decoration: none;
    display: flex;
    align-items: center;
    padding: 0.8rem;
    border-radius: 0.5rem;
    transition: background-color 0.3s;
  }

.sidebar .menu-item.active a {
  font-weight: bold;
}
.menu-item a:hover,
  .menu-item.active a {
    background-color: rgba(255, 255, 255, 0.1);
  }

.sidebar .menu-item i {
  margin-right: 10px;
}
.menu-item i {
    margin-right: 1rem;
    width: 1.2rem;
    text-align: center;
  }
  /* Main Content Area */
  .main-content {
    flex: 1;
    padding: 1.5rem;
    margin-left: 240px;
    width: calc(100% - 240px);
    transition: all 0.3s ease;
  }

/* Header Styles */
.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 2rem;
  }


.header .title {
  font-size: 1.5rem;
}
.title {
    font-size: clamp(1.2rem, 2.5vw, 1.5rem);
  }
/* Table Styles */
.coupons-table,
.orders-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}
.coupons-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 2rem;
    font-size: clamp(0.8rem, 1.5vw, 1rem);
  }

.coupons-table th,
.coupons-table td,
.orders-table th,
.orders-table td {
  border: 1px solid #ddd;
  padding: 12px;
  text-align: left;
}

.coupons-table th,
.orders-table th {
  background-color: #1f2937;
  color: white;
  font-weight: bold;
}
.coupons-table th,
  .coupons-table td {
    padding: clamp(0.5rem, 1vw, 1rem);
    text-align: left;
    border: 1px solid #ddd;
  }

.coupons-table tr:nth-child(even) {
  background-color: #f9fafb;
}

/* Button Styles */
.btn-add-coupon {
  background-color: #10B981;
  color: white;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
  display: flex;
  align-items: center;
  gap: 8px;
}

.btn-add-coupon,
  .btn-edit,
  .btn-delete,
  .btn-toggle {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    font-size: clamp(0.8rem, 1.5vw, 1rem);
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }


.btn-edit {
  background-color: #3B82F6;
  color: white;
}

.btn-delete {
  background-color: #EF4444;
  color: white;
}

.btn-view {
  background-color: #17a2b8;
  color: white;
}

.btn-toggle.active {
  background-color: #10B981;
  color: white;
}

.btn-toggle.inactive {
  background-color: #9b9b9b;
  color: white;
}

/* Status Indicators */
.status-active {
  color: #10B981;
  font-weight: bold;
}

.status-inactive {
  color: #6B7280;
  font-weight: bold;
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 2000;
    padding: 1rem;
  }

  .modal-content {
    background: white;
    width: min(600px, 100%);
    margin: 2rem auto;
    padding: 2rem;
    border-radius: 0.5rem;
    position: relative;
    max-height: 90vh;
    overflow-y: auto;
  }


.modal-title {
  color: #1f2937;
}

.close {
  position: absolute;
  right: 20px;
  top: 15px;
  font-size: 24px;
  cursor: pointer;
}

/* Form Styles */
.form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }


  .form-group input,
  .form-group select {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid #ddd;
    border-radius: 0.25rem;
    font-size: 1rem;
  }

.form-control:focus {
  border-color: #1f2937;
  box-shadow: 0 0 0 0.2rem rgba(31, 41, 55, 0.25);
}

.error-message,
.error {
  color: #dc3545;
  font-size: 0.875rem;
  margin-top: 0.25rem;
  display: none;
}

.is-invalid {
  border-color: #dc3545 !important;
}

.btn-submit {
  background-color: #10B981;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  width: 100%;
  margin-top: 15px;
}

.btn-submit:disabled {
  background-color: #9CA3AF;
  cursor: not-allowed;
}

/* Pagination Styles */
.pagination {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  display: flex;
  justify-content: center;
  margin: 0;
  padding: 10px 0;
  background-color: #f8f9fa;
  box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
  z-index: 500;
}

.pagination a {
  padding: 8px 12px;
  text-decoration: none;
  border: 1px solid #ddd;
  color: #333;
  margin: 0 4px;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.pagination a:hover {
  background-color: #e9ecef;
}

.pagination a.active {
  background-color: #1f2937;
  color: white;
  border-color: #1f2937;
}
@media (max-width: 1024px) {
    .sidebar {
      width: 200px;
    }
    .main-content {
      margin-left: 200px;
      width: calc(100% - 200px);
    }
  }

  @media (max-width: 768px) {
    body {
      flex-direction: column;
    }

    .sidebar {
      width: 100%;
      min-height: auto;
      position: relative;
      padding: 1rem;
    }

    .main-content {
      margin-left: 0;
      width: 100%;
      padding: 1rem;
    }

    .menu {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .menu-item {
      margin: 0;
      flex: 1 1 auto;
    }

    .menu-item a {
      padding: 0.5rem;
      justify-content: center;
    }

    .menu-item span {
      display: none;
    }

    .menu-item i {
      margin: 0;
    }

    .coupons-table {
      display: block;
      overflow-x: auto;
      white-space: nowrap;
    }
  }

  @media (max-width: 480px) {
    .header {
      flex-direction: column;
      align-items: stretch;
    }

    .btn-add-coupon {
      width: 100%;
      justify-content: center;
    }

    .modal-content {
      padding: 1rem;
      margin: 1rem;
    }

    .form-group input,
    .form-group select {
      padding: 0.6rem;
    }

    td .btn-edit,
    td .btn-delete,
    td .btn-toggle {
      padding: 0.4rem;
      font-size: 0.8rem;
    }
  }

  /* Handle very small screens */
  @media (max-width: 320px) {
    .menu-item a {
      padding: 0.4rem;
    }

    .menu-item i {
      font-size: 0.9rem;
    }

    .coupons-table th,
    .coupons-table td {
      padding: 0.4rem;
      font-size: 0.75rem;
    }
  }
</style>

</head>
<body>
  <!-- Sidebar -->
  <aside class="sidebar">
    <div class="logo">
      <h1><span class="brand">Zip</span>Kart</h1>
    </div>
    <nav class="menu">
      <ul>
        <li class="menu-item"><a href="/zipkart/admin/dashboard"><i class="fas fa-tachometer-alt"></i> <span>Dashboard</span></a></li>
        <li class="menu-item"><a href="/zipkart/admin/users/view-users"><i class="fas fa-users"></i> <span>Users</span></a></li>
        <li class="menu-item"><a href="/zipkart/admin/categories/view-category"><i class="fas fa-list"></i> <span>Categories</span></a></li>
        <li class="menu-item"><a href="/zipkart/admin/products/view-products"><i class="fas fa-box"></i> <span>Products</span></a></li>
        <li class="menu-item"><a href="/zipkart/admin/orders/view-orders"><i class="fas fa-shopping-cart"></i> <span>Orders</span></a></li>
        <li class="menu-item active"><a href="/zipkart/admin/coupons/view-coupons"><i class="fas fa-ticket-alt"></i> <span>Coupons</span></a></li>
        <!-- <li class="menu-item"><a href="#"><i class="fas fa-cog"></i> <span>Orders</span></a></li> -->
        <li class="menu-item"><a href="#"><i class="fas fa-cog"></i> <span>Settings</span></a></li>
      </ul>
    </nav>
  </aside>


  <!-- Main Content -->
  <main class="main-content">
    <!-- Header -->
    <header class="header">
      <div class="title">Coupon Management</div>
      <button class="btn-add-coupon">
        <i class="fas fa-plus"></i>
        Add New Coupon
      </button>
    </header>

    <!-- Coupons List -->
    <section class="coupons-list">
       <table class="coupons-table">
        <thead>
          <tr>
            <th>Code</th>
            <th>Description</th>
            <th>Min Purchase</th>
            <th>Max Discount</th>
            <th>Discount value</th>
            <th>Expiry Date</th>
            <th>Limit</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% coupons.forEach(function(coupon) { %>
              <tr data-id="<%= coupon._id %>">
                <td data-field="code"><%= coupon.code %></td>
                <td data-field="description"><%= coupon.description %></td>
                <td data-field="discountType" hidden><%= coupon.discountType %></td>
                <td data-field="minPurchaseAmount"><%= coupon.minPurchaseAmount %></td>
                <td data-field="maxDiscountLimit"><%= coupon.maxDiscountLimit %></td>
                <td data-field=""><%= coupon.discountType !== "percentage" ? "₹" : "" %><%= coupon.discountValue %><%= coupon.discountType === "percentage" ? "%" : "" %> </td>
                <td data-field="discountValue" hidden><%= coupon.discountValue %></td>
                <td data-field="expiryDate"><%= new Date(coupon.expiryDate).toISOString().split('T')[0] %></td>
                <td data-field="usageLimit"><%= coupon.usageLimit %></td>
                <td>
                  <span class="status-<%= coupon.isActive ? 'active' : 'inactive' %>">
                    <%= coupon.isActive ? 'Active' : 'Inactive' %>
                  </span>
                </td>
                <td>
                  <button class="btn-edit" data-id="<%= coupon._id %>"><i class="fas fa-edit"></i></button>
                  <button class="btn-toggle <%= coupon.isActive ? 'active' : 'inactive' %>" data-id="<%= coupon._id %>">
                    <%= coupon.isActive ? 'Inactive' : 'Active' %>
                  </button>
                  <button class="btn-delete" data-id="<%= coupon._id %>"><i class="fas fa-trash"></i></button>
                </td>
              </tr>
              <% }); %>
        </tbody>
      </table> 




      <script>
        document.querySelectorAll('.btn-toggle').forEach(button => {
          button.addEventListener('click', async function () {
            // Get the coupon ID from data-id attribute
            const couponId = this.getAttribute('data-id');
            console.log("Clicked");
        
            // Get current status (active/inactive) from button's class
            const isCurrentlyActive = this.classList.contains('active');
        
            try {
              const result = await Swal.fire({
                title: 'Are you sure?',
                text: `Do you want to set the status to ${isCurrentlyActive ? "Inactive" : "Active"}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, proceed!',
                cancelButtonText: 'Cancel'
              });
        
              if (result.isConfirmed) {
                const response = await axios.patch(`/zipkart/admin/coupons/view-coupons/update-status`, {
                  isActive: !isCurrentlyActive, // Toggle status before sending
                  couponId
                });
        
                await Swal.fire({
                  title: 'Success!',
                  text: response.data.message,
                  icon: 'success',
                  confirmButtonText: 'OK'
                });
        
                location.reload();
              } else {
                await Swal.fire({
                  title: 'Cancelled',
                  text: 'No changes were made.',
                  icon: 'info',
                  confirmButtonText: 'OK'
                });
              }
            } catch (error) {
              await Swal.fire({
                title: 'Error!',
                text: error.response?.data?.error || 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
              });
            }
          });
        });


        document.querySelectorAll('.btn-delete').forEach(button => {
          button.addEventListener('click', async function () {
            // Get the coupon ID from data-id attribute
            const couponId = this.getAttribute('data-id');
            try {
              const result = await Swal.fire({
                title: 'Are you sure?',
                text: `Do you want to "delete" this?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, proceed!',
                cancelButtonText: 'Cancel'
              });
        
              if (result.isConfirmed) {
                const response = await axios.delete(`/zipkart/admin/coupons/view-coupons/remove/${couponId}`)
        
                await Swal.fire({
                  title: 'Success!',
                  text: response.data.message,
                  icon: 'success',
                  confirmButtonText: 'OK'
                });
        
                location.reload();
              } else {
                await Swal.fire({
                  title: 'Cancelled',
                  text: 'No changes were made.',
                  icon: 'info',
                  confirmButtonText: 'OK'
                });
              }
            } catch (error) {
              await Swal.fire({
                title: 'Error!',
                text: error.response?.data?.error || 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
              });
            }

          });
        });

        </script>
        





    </section>


  <!-- Dynamic Modal -->
  <div id="dynamicModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2 id="modalTitle">Add/Edit Coupon</h2>
      <form id="dynamicForm" onsubmit="handleSubmit(event)">
        <input type="hidden" id="editId" name="id">
        <div id="formFields"></div>
        <button type="submit" class="btn-submit">Submit</button>
      </form>
    </div>
  </div>


  <script>
  // Form configuration for coupons
  const formConfig = {
    title: 'Coupon',
    endpoint: '/zipkart/admin/coupons',
    fields: [
      {
        name: 'code',
        label: 'Coupon Code*',
        type: 'text',
        required: true,
        validation: {
          // pattern: '^[A-Z0-9]{4,}$',
          message: 'Code must be uppercase letters and numbers only, minimum 4 characters'
        }
      },
      {
        name: 'description',
        label: 'Description*',
        type: 'text',
        required: true,
        validation: {
          minLength: 10,
          message: 'Description must be at least 10 characters'
        }
      },
      {
      name: 'discountType',
      label: 'Discount Type*',
      type: 'select',
      required: true,
      options: [
        { value: 'percentage', label: 'Percentage' },
        { value: 'fixed', label: 'Fixed' }
      ],
      validation: {
        message: 'Select a discount type'
      }
    },
    {
        name: 'discountValue',
        label: 'Discount Value*',
        type: 'number',
        required: true,
        validation: {
          min: 1,
          message: 'Enter a valid discount value'
        }
      },
       {
        name: 'minPurchaseAmount',
        label: 'Minimum Purchase Amount*',
        type: 'number',
        required: true,
        validation: {
          min: 1,
          message: 'Enter a valid minimum purchase amount'
        }
      },
      {
        name: 'maxDiscountLimit',
        label: 'Maximum Discount Limit*',
        type: 'number',
        required: true,
        validation: {
          min: 1,
          message: 'Enter a valid maximum discount limit'
        }
      },
     
     
      
      {
        name: 'expiryDate',
        label: 'Expiry Date*',
        type: 'date',
        required: true,
        validation: {
          future: true,
          message: 'Select a future date'
        }
      },
      {
        name: 'usageLimit',
        label: 'Usage Limit*',
        type: 'number',
        required: true,
        validation: {
          min: 1,
          message: 'Enter a valid usage limit'
        }
      }
    ]
  };

  let isEditMode = false;

  // Initialize event listeners
  document.querySelector('.btn-add-coupon').addEventListener('click', () => openModal());
  document.querySelector('.close').addEventListener('click', closeModal);
  document.querySelectorAll('.btn-edit').forEach(btn => {
    btn.addEventListener('click', (e) => {
      isEditMode = true;
      const rowData = getRowData(e.target.closest('tr'));
      openModal(rowData);
    });
  });

  function openModal(data = null) {
    isEditMode = !!data;
    document.getElementById('modalTitle').textContent = `${isEditMode ? 'Edit' : 'Add'} ${formConfig.title}`;
    document.getElementById('dynamicModal').style.display = 'block';
    
    const formFields = document.getElementById('formFields');
    formFields.innerHTML = '';
    
    formConfig.fields.forEach(field => {
      const fieldHtml = createFormField(field, data?.[field.name]);
      formFields.innerHTML += fieldHtml;
    });

    if (data) {
      document.getElementById('editId').value = data.id;
    }
  }

  function createFormField(field, value) {
    let input;

    if (field.type === 'select') {
        input = `<select id="${field.name}" name="${field.name}" required>
            ${field.options.map(option => 
                `<option value="${option.value}" ${option.value === value ? 'selected' : ''}>
                    ${option.label}
                </option>`).join('')}
        </select>`;
    } else if (field.type === 'textarea') {
        input = `<textarea id="${field.name}" name="${field.name}">${value || ''}</textarea>`;
    } else {
        input = `<input type="${field.type}" id="${field.name}" name="${field.name}" value="${value || ''}" 
            ${field.validation?.pattern ? `pattern="${field.validation.pattern}"` : ''}
            ${field.validation?.min ? `min="${field.validation.min}"` : ''}
            ${field.type === 'number' ? 'step="any"' : ''}
            required>`;
    }

    return `
        <div class="form-group">
            <label for="${field.name}">${field.label}</label>
            ${input}
            <div class="error" id="${field.name}Error">${field.validation?.message || ''}</div>
        </div>
    `;
}

  function closeModal() {
    document.getElementById('dynamicModal').style.display = 'none';
    document.getElementById('dynamicForm').reset();
    document.querySelectorAll('.error').forEach(el => el.style.display = 'none');
  }

  function validateForm() {
    let valid = true;
    document.querySelectorAll('.error').forEach(el => el.style.display = 'none');

    formConfig.fields.forEach(field => {
      const element = document.getElementById(field.name);
      const value = element.value;

      if (field.validation) {
        if (field.validation.pattern && !value.match(new RegExp(field.validation.pattern))) {
          document.getElementById(`${field.name}Error`).style.display = 'block';
          valid = false;
        }
        if (field.validation.minLength && value.length < field.validation.minLength) {
          document.getElementById(`${field.name}Error`).style.display = 'block';
          valid = false;
        }
        if (field.validation.future && new Date(value) <= new Date()) {
          document.getElementById(`${field.name}Error`).style.display = 'block';
          valid = false;
        }
        if (field.name === 'discountAmount') {
          const maxLimit = Number(document.getElementById('maxDiscountLimit').value);
          if (Number(value) > maxLimit) {
            document.getElementById(`${field.name}Error`).textContent = 'Discount cannot exceed maximum limit';
            document.getElementById(`${field.name}Error`).style.display = 'block';
            valid = false;
          }
        }
      }
    });

    return valid;
  }

  function getRowData(row) {
    const data = { id: row.dataset.id };
    formConfig.fields.forEach(field => {
      const cell = row.querySelector(`[data-field="${field.name}"]`);
      if (cell) {
        data[field.name] = cell.textContent;
      }
    });
    return data;
  }

  async function handleSubmit(event) {
    event.preventDefault();
    
    if (!validateForm()) return;

    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData.entries());
    console.log("========data:",data)

    function validateCouponData(data) {
    // Regex Patterns
    const codeRegex = /^[A-Z0-9]{5,10}$/; // Coupon code (5-10 uppercase letters/numbers)
    // const dateRegex = /^\d{2}-\d{2}-\d{4}$/; // DD-MM-YYYY format

    // Validation Checks
    if (!data.code) return showAlert("Coupon Code is required");
    if (!codeRegex.test(data.code)) return showAlert("Invalid Coupon Code (Only uppercase letters & numbers, 5-10 characters)");

    if (!data.description) return showAlert("Description is required");

    if (!data.discountValue) return showAlert("Discount value is required");
    if (isNaN(data.discountValue) || data.discountValue <= 0) return showAlert("Discount value must be a valid positive number");

    if (!data.minPurchaseAmount) return showAlert("Minimum Purchase Amount is required");
    if (isNaN(data.minPurchaseAmount) || data.minPurchaseAmount <= 0) return showAlert("Minimum Purchase Amount must be a valid positive number");

    if (!data.maxDiscountLimit) return showAlert("Maximum Discount Limit is required");
    if (isNaN(data.maxDiscountLimit) || data.maxDiscountLimit <= 0) return showAlert("Maximum Discount Limit must be a valid positive number");

    if (!data.expiryDate) return showAlert("Expiry Date is required");
    // if (!dateRegex.test(data.expiryDate)) return showAlert("Invalid Expiry Date Format (DD-MM-YYYY)");
    if (new Date(data.expiryDate) < new Date()) return showAlert("Expiry Date must be in the future");

    if (!data.usageLimit) return showAlert("Usage Limit is required");
    if (isNaN(data.usageLimit) || data.usageLimit <= 0) return showAlert("Usage Limit must be a valid positive number");

    return true; // Validation Passed
}

// Function to show SweetAlert for validation errors
function showAlert(message) {
    Swal.fire({
        icon: "error",
        title: "Validation Error",
        text: message
    });
}
    
//validate from here





  if( validateCouponData(data) ){
      try {
        // const endpoint = `${formConfig.endpoint}/${isEditMode ? 'edit' : 'add'}`;
        const response = await axios.post(`/zipkart/admin/coupons/view-coupons/${isEditMode ? 'edit-coupon' : 'add-coupon'}`, data);
        
        if (response.data.success) {
          Swal.fire({
            title: 'Success!',
            text: `${formConfig.title} ${isEditMode ? 'updated' : 'added'} successfully`,
            icon: 'success'
          }).then(() => {
            closeModal();
            window.location.reload();
          });
        }
        else{
          Swal.fire({
          title: 'Error!',
          text: response.data.message || `Failed to ${isEditMode ? 'update' : 'add'} ${formConfig.title.toLowerCase()}`,
          icon: 'error'
        });
        }
      } catch (error) {
        Swal.fire({
          title: 'Error!',
          text: error.response?.data?.message || `Failed to ${isEditMode ? 'update' : 'add'} ${formConfig.title.toLowerCase()}`,
          icon: 'error'
        });
      }
    }else{
    Swal.fire({
          icon: "error",
          title: "Validation Error",
          text: message
      });
  }
}
  </script>

  </main>
</body>
</html>