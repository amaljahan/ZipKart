<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Add Cropper.js CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Edit Product</h2>
        <form id="productEditForm" action="/zipkart/admin/products/edit-product/<%= product._id %>" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="productId" value="<%= product._id %>">

            <div class="mb-3">
                <label for="name" class="form-label">Product Name</label>
                <input 
                type="text" 
                class="form-control" 
                id="name" 
                name="name" 
                value="<%= product.name %>" 
                required 
                oninput="validateName(this)" 
              >
              <small id="nameError" style="color: red; display: none;">Invalid name. Only alphabets are allowed.</small>
            </div>
        
            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <select class="form-select" id="category" name="category" required>
                    <option value="" disabled>Select a category</option>
                    <% categories.forEach(function (category) { %>
                        <option value="<%= category._id %>" <%= product.category._id.toString() === category._id.toString() ? 'selected' : '' %>>
                            <%= category.name %>
                        </option>
                    <% }) %>
                </select>
            </div>
        
            <div class="mb-3">
                <label for="price" class="form-label">Price (â‚¹)</label>
                <input type="number" class="form-control" id="price" name="price" value="<%= product.price %>" required>
            </div>
        
            <div class="mb-3">
                <label for="stock" class="form-label">Stock</label>
                <input type="number" class="form-control" id="stock" name="stock" value="<%= product.stock %>" required>
            </div>
        
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="3" required>
                    <%= product.description %>
                </textarea>
            </div>
        
            <div class="mb-3">
                <label for="unit" class="form-label">Unit</label>
                <select class="form-select" id="unit" name="unit" required>
                    <option value="" disabled>Select a unit</option>
                    <option value="kg" <%= product.unit === 'kg' ? 'selected' : '' %>>Kilogram (kg)</option>
                    <option value="g" <%= product.unit === 'g' ? 'selected' : '' %>>Gram (g)</option>
                    <option value="mg" <%= product.unit === 'mg' ? 'selected' : '' %>>Milligram (mg)</option>
                    <option value="t" <%= product.unit === 't' ? 'selected' : '' %>>Ton (t)</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="images" class="form-label">Images</label>
                
                <!-- Display existing images from the database -->
                <% product.images.forEach(function(image, index) { %>
                    <div class="image-preview" id="image-preview-<%= index %>">
                        <!-- Image preview -->
                        <img src="<%= image.thumbnailUrl %>" alt="Image <%= index + 1 %>" class="img-thumbnail" width="100">
                        
                        <!-- Hidden field to keep track of existing images -->
                        <input type="hidden" name="existingImages[]" value="<%= image.thumbnailUrl %>">
                        
                        <!-- Buttons to edit or delete the image -->
                        <div class="d-flex mt-2">
                            <button type="button" class="btn btn-danger btn-sm delete-image-btn" data-index="<%= index %>">Delete</button>
                        </div>
                    </div>
                <% }) %>
            
                <!-- Field to upload new images -->
                <div id="imageFields">
                </div>
                <button type="button" id="addImageBtn" class="btn btn-info mt-3">Add Another Image</button>
            </div>
            
            <button type="submit" class="btn btn-primary">Update Product</button>
            <button type="button" class="btn btn-secondary" onclick="window.location.href='/zipkart/admin/products/view-products'">Cancel</button>
        </form>
    </div>

    <!-- Modal for Image Cropping -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img id="cropImage" style="max-width: 100%; display: block;">
                </div>
                <div class="modal-footer">
                    <button type="button" id="closeModalButton" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" id="cropImageButton" class="btn btn-primary">Crop Image</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add JS and Cropper.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            let cropper;
            let currentInput;

            // Add new image input field
            $('#addImageBtn').click(function () {
                const newInput = document.createElement("input");
                newInput.type = "file";
                newInput.name = "images";
                newInput.className = "form-control mb-2";
                newInput.accept = "image/jpeg, image/jpg, image/png, image/webp";
                newInput.addEventListener("change", function () {
                    openCropModal(this);
                });
                $('#imageFields').append(newInput);
            });

            // Open crop modal
            window.openCropModal = function (input) {
                const file = input.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $('#cropImage').attr('src', e.target.result);
                        $('#cropModal').modal('show');
                        currentInput = input;
                        if (cropper) cropper.destroy();
                        const image = document.getElementById('cropImage');
                        cropper = new Cropper(image, {
                            aspectRatio: 1,
                            viewMode: 2,
                        });
                    };
                    reader.readAsDataURL(file);
                }
            };

            // Crop image and set to input
            $('#cropImageButton').click(function () {
                const canvas = cropper.getCroppedCanvas();
                canvas.toBlob(function (blob) {
                    const file = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    currentInput.files = dataTransfer.files;
                    $('#cropModal').modal('hide');
                });
            });

            // Handle deleting an image
            $('.delete-image-btn').click(function () {
                const index = $(this).data('index');
                $('#image-preview-' + index).remove();
            });

            // Form submission with Axios
            $('#productEditForm').on('submit', function (e) {
                e.preventDefault();
                
                const formData = new FormData(this);

                axios.post(`/zipkart/admin/products/edit-product/${formData.get('productId')}`, formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                })
                .then(response => {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Product updated successfully.',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/zipkart/admin/products/view-products';
                    });
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Error!',
                        text: error.response?.data?.message || 'Failed to update product.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
            });

            // Input validation with SweetAlert
            function showAlert(title, text, icon) {
                Swal.fire({
                    title: title,
                    text: text,
                    icon: icon,
                    confirmButtonText: 'OK',
                });
            }

            // Name validation
            document.getElementById('name').addEventListener('input', function () {
                const input = this;
                const regex = /^[A-Za-z\s]*$/;
                if (!regex.test(input.value)) {
                    input.value = input.value.replace(/[^A-Za-z\s]/g, '');
                    showAlert('Invalid Name', 'Only alphabets and spaces are allowed.', 'error');
                }
                input.value = input.value.replace(/\s+/g, ' ');
            });

            // Price validation
            document.getElementById('price').addEventListener('input', function () {
                const priceInput = this;
                const priceValue = priceInput.value.trim();
                if (priceValue === "" || parseFloat(priceValue) <= 0) {
                    showAlert('Invalid Price', 'Price must be a positive number.', 'error');
                    priceInput.style.borderColor = "red";
                } else {
                    priceInput.style.borderColor = "";
                }
            });

            // Stock validation
            document.getElementById('stock').addEventListener('input', function () {
                const stockInput = this;
                const stockValue = stockInput.value.trim();
                if (stockValue === "" || parseFloat(stockValue) < 0) {
                    showAlert('Invalid Stock', 'Stock cannot be negative.', 'error');
                    stockInput.style.borderColor = "red";
                } else {
                    stockInput.style.borderColor = "";
                }
            });

            // Image validation for file type
            document.getElementById('addImageBtn').addEventListener('click', function () {
                const inputs = document.querySelectorAll('input[type="file"]');
                inputs.forEach(input => {
                    input.addEventListener('change', function () {
                        const file = this.files[0];
                        if (file && !['image/jpeg', 'image/jpg', 'image/png', 'image/webp'].includes(file.type)) {
                            showAlert('Invalid File Type', 'Only JPEG, JPG, PNG, and WEBP formats are accepted.', 'error');
                            this.value = '';
                        }
                    });
                });
            });
        });
    </script>
</body>
</html>